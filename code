// File: src/Main.java

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.chart.*;
import javafx.scene.control.ComboBox;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

import java.util.List;
import java.util.Map;

public class Main extends Application {
    @Override
    public void start(Stage primaryStage) {
        BorderPane root = new BorderPane();

        // Dropdown for genre filtering
        ComboBox<String> genreDropdown = new ComboBox<>();
        genreDropdown.setPromptText("Select Genre");

        // Load and preprocess data
        List<SpotifyTrack> tracks = DataLoader.loadTracks("data/spotify_dataset.csv");
        Map<String, List<SpotifyTrack>> genreMap = DataLoader.groupByGenre(tracks);

        genreDropdown.getItems().addAll(genreMap.keySet());

        // Chart
        ScatterChart<Number, Number> scatterChart = ChartUtils.createEnergyVsDanceabilityChart(tracks);
        root.setCenter(scatterChart);
        root.setTop(genreDropdown);

        // Update chart on genre select
        genreDropdown.setOnAction(e -> {
            String selected = genreDropdown.getValue();
            if (selected != null) {
                List<SpotifyTrack> filtered = genreMap.get(selected);
                ScatterChart<Number, Number> updatedChart = ChartUtils.createEnergyVsDanceabilityChart(filtered);
                root.setCenter(updatedChart);
            }
        });

        primaryStage.setTitle("Spotify Data Visualization");
        primaryStage.setScene(new Scene(root, 800, 600));
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}

// File: src/SpotifyTrack.java

public class SpotifyTrack {
    public String trackName;
    public String artist;
    public String genre;
    public double energy;
    public double danceability;
    public int popularity;
    public double tempo;

    public SpotifyTrack(String trackName, String artist, String genre, double energy, double danceability, int popularity, double tempo) {
        this.trackName = trackName;
        this.artist = artist;
        this.genre = genre;
        this.energy = energy;
        this.danceability = danceability;
        this.popularity = popularity;
        this.tempo = tempo;
    }
}

// File: src/DataLoader.java

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.*;

public class DataLoader {
    public static List<SpotifyTrack> loadTracks(String path) {
        List<SpotifyTrack> tracks = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(path))) {
            String line = br.readLine(); // Skip header
            while ((line = br.readLine()) != null) {
                String[] fields = line.split(",");
                String name = fields[0];
                String artist = fields[1];
                String genre = fields[2];
                double energy = Double.parseDouble(fields[3]);
                double dance = Double.parseDouble(fields[4]);
                int pop = Integer.parseInt(fields[5]);
                double tempo = Double.parseDouble(fields[6]);

                tracks.add(new SpotifyTrack(name, artist, genre, energy, dance, pop, tempo));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return tracks;
    }

    public static Map<String, List<SpotifyTrack>> groupByGenre(List<SpotifyTrack> tracks) {
        Map<String, List<SpotifyTrack>> genreMap = new HashMap<>();
        for (SpotifyTrack t : tracks) {
            genreMap.computeIfAbsent(t.genre, k -> new ArrayList<>()).add(t);
        }
        return genreMap;
    }
}

// File: src/ChartUtils.java

import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.ScatterChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Tooltip;

import java.util.List;

public class ChartUtils {
    public static ScatterChart<Number, Number> createEnergyVsDanceabilityChart(List<SpotifyTrack> tracks) {
        NumberAxis xAxis = new NumberAxis("Danceability", 0, 1, 0.1);
        NumberAxis yAxis = new NumberAxis("Energy", 0, 1, 0.1);
        ScatterChart<Number, Number> chart = new ScatterChart<>(xAxis, yAxis);
        chart.setTitle("Energy vs. Danceability");

        XYChart.Series<Number, Number> series = new XYChart.Series<>();
        series.setName("Tracks");

        for (SpotifyTrack t : tracks) {
            XYChart.Data<Number, Number> data = new XYChart.Data<>(t.danceability, t.energy);
            series.getData().add(data);
            Tooltip.install(data.getNode(), new Tooltip(t.trackName + " by " + t.artist));
        }

        chart.getData().add(series);
        return chart;
    }
}
